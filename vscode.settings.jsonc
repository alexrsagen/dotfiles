{
    "todohighlight.include": [
        "**/*.js",
        "**/*.jsx",
        "**/*.ts",
        "**/*.tsx",
        "**/*.html",
        "**/*.php",
        "**/*.css",
        "**/*.scss",
        "**/*.go",
        "**/*.lua",
        "**/*.cs",
        "**/*.cpp",
        "**/*.cxx",
        "**/*.sh",
        "**/*.txt",
        "**/*.rs"
    ],
    "todohighlight.keywords": [
        "HACK:",
        "XXX:",
        "NOTE:",
        "DEBUG:",
    ],
    "editor.rulers": [
        80
    ],
    "[pebakery]": {
        "editor.wordBasedSuggestions": "off"
    },
    "python.linting.enabled": false,
    "C_Cpp.default.includePath": [
        "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.37.32822\\include",
        "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\shared",
        "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\ucrt",
        "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\um",
        "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22000.0\\winrt",
        "E:\\dev\\git\\openssl1_1-win-build\\build-VS2022\\x64\\Release\\include"
    ],
    "editor.wordWrap": "on",
    "editor.insertSpaces": false,
    "liveshare.guestApprovalRequired": true,
    "gitlens.hovers.currentLine.over": "line",
    "workbench.sideBar.location": "right",
    "[json]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    "triggerTaskOnSave.on": false,
    "files.watcherExclude": {
        "**/target/**": true
    },
    "remote.WSL.fileWatcher.polling": true,
    "remote.WSL.fileWatcher.pollingInterval": 15000,
    "workbench.startupEditor": "none",
    "git.suggestSmartCommit": false,
    "php.validate.executablePath": "E:\\dev\\php8\\php.exe",
    "php.suggest.basic": false,
    "[javascript]": {
        "editor.defaultFormatter": "vscode.typescript-language-features"
    },
    "mssql.connections": [
        {
            "server": "{{put-server-name-here}}",
            "database": "{{put-database-name-here}}",
            "user": "{{put-username-here}}",
            "password": "",
            "id": "76A94997-5226-41D9-87F3-DD2F1A35387F",
            "groupId": "81F2B8DF-C1D7-4F73-B2A8-BC7B985418C0"
        }
    ],
    "editor.fontSize": 16,
    "redhat.telemetry.enabled": false,
    "editor.minimap.enabled": false,
    "workbench.iconTheme": "vs-minimal",
    "workbench.editor.showIcons": false,
    "python.defaultInterpreterPath": "C:\\Program Files\\Python37\\python.exe",
    "[html]": {
        "editor.defaultFormatter": "vscode.html-language-features"
    },
    "editor.bracketPairColorization.enabled": true,
    "editor.guides.bracketPairs": true,
    "editor.unicodeHighlight.invisibleCharacters": false,
    "editor.unicodeHighlight.ambiguousCharacters": false,
    // -- extension settings: error lens ---
    "errorLens.enabledDiagnosticLevels": [
        "warning",
        "error"
    ],
    "errorLens.followCursor": "allLines",
    // Unused [...] errors are noisy and expected during regular development.
    // Instead, juts fall back to graying it out, with a lil bit of an underline.
    "errorLens.exclude": [
        "field is never read: ",
        "function is never used: ",
        "enum is never used: ",
        "variant is never constructed: ",
        "unused variable: "
    ],
    "rust-analyzer.inlayHints.maxLength": 50,
    "rust-analyzer.procMacro.ignored": {
        "async-trait": [
            "async_trait"
        ],
        "tracing-attributes": [
            "instrument"
        ]
    },
    // Warnings for unused variables and dead code are pretty noisy, rust-analyzer will
    // already gray out things that are unused.
    "rust-analyzer.diagnostics.warningsAsHint": [
        "dead_code",
        "unused_variables"
    ],
    // end rust-analyzer settings.
    // Semantic tokens from here on out (applies to all languages).
    // it looks A+ in rust-analyzer, and the ts/python equivalents look alright too.
    "editor.semanticTokenColorCustomizations": {
        "[Default Dark+]": {
            "enabled": true,
            "rules": {
                "variable.reference": {
                    "italic": true
                },
                "parameter.reference": {
                    "italic": true
                },
                "method.static": {
                    "foreground": "#f0c506"
                },
                "method.public": {
                    "foreground": "#eedf54"
                },
                "method.library": {
                    "foreground": "#a5cf0a"
                },
                "method.library.static": {
                    "foreground": "#f0c506"
                },
                "method.trait": {
                    "foreground": "#cca34a"
                },
                "method.library.trait": {
                    "foreground": "#d1ce08"
                },
                "keyword.unsafe": {
                    "foreground": "#df732b"
                    // "italic": true
                },
                "lifetime": {
                    "foreground": "#11ddcc"
                },
                "method.static.unsafe": {
                    "foreground": "#d68855"
                },
                "method.declaration.unsafe": {
                    "foreground": "#df732b"
                },
                "*.unsafe": {
                    "foreground": "#df732b"
                    // "italic": true
                },
                "method.library.unsafe": {
                    "foreground": "#df732b"
                },
                "interface.library": "#ffd99f",
                "builtinAttribute.attribute": {
                    "foreground": "#8ec03e"
                },
                "generic.attribute": {
                    "foreground": "#07faeece"
                },
                "attribute.library": {
                    "foreground": "#b0ff31c4"
                },
                // workaround all attributes being considered unresovled for now?
                // https://github.com/rust-analyzer/rust-analyzer/issues/10935
                "attribute.attribute": {
                    "foreground": "#3fcc8a"
                },
                "derive.attribute": {
                    "foreground": "#2cbd79"
                },
                "parenthesis.attribute": {
                    "foreground": "#338d63"
                },
                "typeParameter": {
                    "foreground": "#ca90fa",
                    "bold": true
                },
                "selfKeyword": "#809dff",
                "enum": "#17b1d8",
                "property": {
                    "foreground": "#75bfe7"
                },
                "parameter": {
                    "foreground": "#00afce"
                },
                "*.consuming": {
                    "bold": true
                },
                "namespace": {
                    "foreground": "#99bfc4"
                },
                "namespace.library": {
                    "foreground": "#b4c499"
                },
                "unresolvedReference": {
                    "foreground": "#ff493c",
                    "underline": true
                },
                "operator": {
                    "foreground": "#d4d4d4da"
                },
                "comma": {
                    "foreground": "#d4d4d4da"
                },
                "colon": {
                    "foreground": "#d4d4d4da"
                },
                "semicolon": {
                    "foreground": "#d4d4d4da"
                },
                "punctuation": {
                    "foreground": "#d4d4d4da"
                },
                "brace": {
                    "foreground": "#f0ddddda"
                },
                "parenthesis": {
                    "foreground": "#d4d4d4da"
                },
                "builtinType": {
                    "foreground": "#b7fc89cb"
                },
                "angle": {
                    "foreground": "#d4d4d4da"
                },
                "operator.controlFlow": {
                    "foreground": "#fd8b5d"
                },
                "interface": "#f7ae40",
                "typeAlias.trait": "#f1e6a3",
                "keyword.controlFlow": {
                    "foreground": "#e689bc"
                },
                "keyword.async": {
                    "foreground": "#ca99f8"
                },
                "keyword.async.controlFlow": {
                    "foreground": "#ca99f8"
                },
                "macro": {
                    "foreground": "#c0b5ff"
                },
                "boolean": {
                    "foreground": "#14b16f"
                },
                "string": {
                    "foreground": "#e98e6a"
                },
                "typeAlias": {
                    "foreground": "#10d1dd"
                },
                "constParameter": {
                    "foreground": "#c15aca",
                    "bold": true
                },
                "struct": {
                    "foreground": "#4EC9B0"
                },
                // Seems to be for tokens in rust doc comments.
                "generic.injected": {
                    "foreground": "#4EC9B0"
                }
            }
        }
    },
    "explorer.autoReveal": false,
    "liquid.format": false,
    "rust-analyzer.imports.granularity.enforce": true,
    "rust-analyzer.completion.snippets.custom": {
        "Arc::new": {
            "postfix": "arc",
            "body": [
                "Arc::new(${receiver})"
            ],
            "requires": "std::sync::Arc",
            "scope": "expr"
        },
        "if ==": {
            "postfix": "ife",
            "body": [
                "if ${receiver} == $1 {",
                "    $0",
                "}"
            ],
            "scope": "expr"
        },
        "if >=": {
            "postfix": "ifge",
            "body": [
                "if ${receiver} >= $1 {$0}"
            ],
            "scope": "expr"
        },
        "Rc::new": {
            "postfix": "rc",
            "body": [
                "Rc::new(${receiver})"
            ],
            "requires": "std::rc::Rc",
            "scope": "expr"
        },
        "Box::pin": {
            "postfix": "boxpin",
            "body": [
                "Box::pin(${receiver})"
            ],
            "scope": "expr"
        },
        "unsafe": {
            "postfix": "unsafe",
            "body": [
                "unsafe { ${receiver} }"
            ],
            "scope": "expr"
        },
        "spawn future": {
            "postfix": "spawn",
            "body": [
                "let $1 = task::spawn(${receiver});"
            ],
            "scope": "expr",
            "requires": "tokio::task"
        },
        "spawn future block": {
            "prefix": "spawn",
            "body": [
                "let $1 = task::spawn(async move { ",
                "    $0",
                "});"
            ],
            "scope": "expr",
            "requires": "tokio::task"
        },
        "Duration::from_secs": {
            "postfix": "sec",
            "body": [
                "Duration::from_secs(${receiver})"
            ],
            "scope": "expr",
            "requires": "std::time::Duration"
        },
        "Duration::from_millis": {
            "postfix": "ms",
            "body": [
                "Duration::from_millis(${receiver})"
            ],
            "scope": "expr",
            "requires": "std::time::Duration"
        },
        "afn": {
            "prefix": "afn",
            "body": [
                "async fn $1($2) {",
                "    $0",
                "}"
            ],
            "scope": "item"
        },
        "afr": {
            "prefix": "afr",
            "body": [
                "async fn $1($2) -> $3 {",
                "    $0",
                "}"
            ],
            "scope": "item"
        },
        "afo": {
            "prefix": "afo",
            "body": [
                "async fn $1($2) -> Option<$3> {",
                "    $0",
                "}"
            ],
            "scope": "item"
        },
        "Ok": {
            "postfix": "ok",
            "body": "Ok(${receiver})",
            "description": "Wrap the expression in a `Result::Ok`",
            "scope": "expr"
        },
        "Err": {
            "postfix": "err",
            "body": "Err(${receiver})",
            "description": "Wrap the expression in a `Result::Err`",
            "scope": "expr"
        },
        "Some": {
            "postfix": "some",
            "body": "Some(${receiver})",
            "description": "Wrap the expression in an `Option::Some`",
            "scope": "expr"
        }
    },
    "rust-analyzer.diagnostics.experimental.enable": true,
    "rust-analyzer.lru.capacity": 65535,
    "rust-analyzer.rustfmt.rangeFormatting.enable": true,
	"cmake.configureOnOpen": false,
	"autoit.consoleParams": "",
	"[python]": {
		"editor.formatOnType": true
    },
    "rust-analyzer.imports.granularity.group": "module",
    "xml.format.preserveAttributeLineBreaks": false,
    "xml.format.maxLineWidth": 0,
    "editor.fontFamily": "'Intel One Mono', Consolas, 'Courier New', monospace",
    "workbench.activityBar.location": "hidden",
    "diffEditor.renderSideBySide": true,
    "diffEditor.ignoreTrimWhitespace": false,
    "[rust]": {
        "editor.defaultFormatter": "rust-lang.rust-analyzer"
    },
    "zenMode.hideLineNumbers": false,
    "chat.commandCenter.enabled": false,
    "mssql.connectionGroups": [
        {
            "name": "ROOT",
            "id": "81F2B8DF-C1D7-4F73-B2A8-BC7B985418C0"
        }
    ],
    "chat.agent.enabled": false,
    "telemetry.feedback.enabled": false
}
